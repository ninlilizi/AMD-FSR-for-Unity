// FidelityFX Super Resolution Sample
//
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#pragma kernel mainCS

#define threadGroupWorkRegionDim 16

//uint4 Sample;
uint HDR;

// Input / Output dimensions
uint input_viewport_width;
uint input_viewport_height;
uint input_image_width;
uint input_image_height;
uint output_image_width;
uint output_image_height;

// 0 = FSR
// 1 = Bilinear
uint upsample_mode;

// 0 = Sharpen
// 1 = Upscale
uint upscale_or_sharpen;

// Sharpening amount
float sharpness;

// We want these defined
#define A_GPU 1
#define A_HLSL 1

#define SAMPLE_SLOW_FALLBACK 1
#define SAMPLE_BILINEAR 1
#define SAMPLE_EASU 1
#define SAMPLE_RCAS 1

	SamplerState samLinearClamp
	{
		Filter = MIN_MAG_MIP_LINEAR_POINT;
	};

// Apply this to restore the linear HDR color before writing out the result of the resolve.
float max3(float x, float y, float z) { return max(x, max(y, z)); }
float3 TonemapInvert(float3 c) { return c * rcp(1.0 - max3(c.r, c.g, c.b)); }


#if SAMPLE_SLOW_FALLBACK
	#include "ffx_a.cginc"
	Texture2D InputTexture;
	RWTexture2D<float4> OutputTexture;
	#if SAMPLE_EASU
		#define FSR_EASU_F 1
		AF4 FsrEasuRF(AF2 p) { AF4 res = InputTexture.GatherRed(samLinearClamp, p, int2(0, 0)); return res; }
		AF4 FsrEasuGF(AF2 p) { AF4 res = InputTexture.GatherGreen(samLinearClamp, p, int2(0, 0)); return res; }
		AF4 FsrEasuBF(AF2 p) { AF4 res = InputTexture.GatherBlue(samLinearClamp, p, int2(0, 0)); return res; }
	#endif
	#if SAMPLE_RCAS
		#define FSR_RCAS_F
		AF4 FsrRcasLoadF(ASU2 p) { return InputTexture.Load(int3(ASU2(p), 0)); }
		void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b) {}
	#endif
#else
	#define A_HALF
	#include "ffx_a.cginc"
	Texture2D<AH4> InputTexture;
	RWTexture2D<AH4> OutputTexture;
	#if SAMPLE_EASU
		#define FSR_EASU_H 1
		AH4 FsrEasuRH(AF2 p) { AH4 res = InputTexture.GatherRed(samLinearClamp, p, int2(0, 0)); return res; }
		AH4 FsrEasuGH(AF2 p) { AH4 res = InputTexture.GatherGreen(samLinearClamp, p, int2(0, 0)); return res; }
		AH4 FsrEasuBH(AF2 p) { AH4 res = InputTexture.GatherBlue(samLinearClamp, p, int2(0, 0)); return res; }
	#endif
	#if SAMPLE_RCAS
		#define FSR_RCAS_H
		AH4 FsrRcasLoadH(ASW2 p) { return InputTexture.Load(ASW3(ASW2(p), 0)); }
		void FsrRcasInputH(inout AH1 r,inout AH1 g,inout AH1 b){}
	#endif
#endif

#include "ffx_fsr1.cginc"

void CurrFilter(int2 pos, float4 Const0, float4 Const1, float4 Const2, float4 Const3)
{
	if (upsample_mode) // Bilinear
	{
		AF2 pp = (AF2(pos) * AF2_AU2(Const0.xy) + AF2_AU2(Const0.zw)) * AF2_AU2(Const1.xy) + AF2(0.5, -0.5) * AF2_AU2(Const1.zw);
		OutputTexture[pos] = InputTexture.SampleLevel(samLinearClamp, pp, 0.0);
	}
	else // Easu
	{
		if (upscale_or_sharpen) // Up-scale
		{
#if SAMPLE_SLOW_FALLBACK
			AF3 c;
			FsrEasuF(c, pos, Const0, Const1, Const2, Const3);
			if (HDR == 1)
				c *= c;
			OutputTexture[pos] = float4(c, 1);
#else
			AH3 c;
			FsrEasuH(c, pos, Const0, Const1, Const2, Const3);
			if (HDR == 1)
				c *= c;
			OutputTexture[pos] = AH4(c, 1);
#endif
		}
		else // Sharpen
		{
#if SAMPLE_RCAS
#if SAMPLE_SLOW_FALLBACK
			AF3 c;
			FsrRcasF(c.r, c.g, c.b, pos, Const0);
			if (HDR == 1)
				c *= c;
			OutputTexture[pos] = float4(c, 1);
#else
			AH3 d;
			FsrRcasH(d.r, d.g, d.b, pos, Const0);
			if (HDR == 1)
				d *= d;
			OutputTexture[pos] = AH4(d, 1);
#endif
#endif
		}
	}
}

[numthreads(64, 1, 1)]
void mainCS(uint3 LocalThreadId : SV_GroupThreadID, uint3 WorkGroupId : SV_GroupID, uint3 Dtid : SV_DispatchThreadID)
{
	// Initialize these
	uint4 Const0 = (0).xxxx;
	uint4 Const1 = (0).xxxx;
	uint4 Const2 = (0).xxxx;
	uint4 Const3 = (0).xxxx;

	if (upscale_or_sharpen) // Up-scale
	{
		FsrEasuCon(Const0, Const1, Const2, Const3, input_viewport_width, input_viewport_height, input_image_width, input_image_height, output_image_width, output_image_height);
	}
	else // Sharpen
	{
		FsrRcasCon(Const0, sharpness);
	}

	// Do remapping of local xy in work-group for a more PS-like swizzle pattern.
	AU2 gxy = ARmp8x8(LocalThreadId.x) + AU2(WorkGroupId.x << 4u, WorkGroupId.y << 4u);

	CurrFilter(gxy, Const0, Const1, Const2, Const3);
	gxy.x += 8u;
	CurrFilter(gxy, Const0, Const1, Const2, Const3);
	gxy.y += 8u;
	CurrFilter(gxy, Const0, Const1, Const2, Const3);
	gxy.x -= 8u;
	CurrFilter(gxy, Const0, Const1, Const2, Const3);
}

